# -*- coding: utf-8 -*-
"""Untitled66.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YOBjI0R_rFTTF_Fn1rM5nnbGQwG6ZSEv

**Importing the Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""**Importing the dataset**"""

dataset=pd.read_csv('titanic_dataset.csv')

"""**Decoding Dataset**"""

dataset.head()

dataset.columns

dataset.info()

dataset.describe()

"""**Checking for missing values**"""

sns.heatmap(dataset.isnull(),yticklabels=False,cbar=False,cmap='viridis')

dataset.isnull().sum()

"""**Handling missing values**"""

dataset['Cabin'].fillna('Unknown', inplace=True)

"""Insights : We cannot replace missing values as it can't be predicted and can't be assumed and also we can't remove the rows with missing columns as more than 80% are missing, so we are proceeding in this way of giving value names 'unknown'"""

# Find the most frequently occurring value
most_frequent_value = dataset['Embarked'].mode()[0]

# Replace missing values with the most frequent value
dataset['Embarked'].fillna(most_frequent_value, inplace=True)

"""Insights : We have only 2 missing values in Embarked column and we replaced the missing values with most frequently entered value, that is, the value of place where most of the people embarked

Plotting the age distribution to decide whether to replace by mean of ages or median of ages
"""

plt.hist(dataset['Age'].dropna(), bins=20, color='skyblue', edgecolor='black')
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

"""Insights : the distribution is almost bell-shaped curve so replacing with mean values would be good"""

mean_age = dataset['Age'].mean()
dataset['Age'].fillna(mean_age, inplace=True)

"""Checking for missing values again !!"""

dataset.isnull().sum()

"""**Explore about Categorical Variables**

Sex
"""

Gender_survival=dataset.groupby(['Survived','Sex']).size().reset_index().rename(columns={0:'Survived_Count'})

print(Gender_survival)

xticks_labels = ['{} - {}'.format(survived, sex) for survived, sex in zip(Gender_survival['Survived'], Gender_survival['Sex'])]
plt.bar(range(len(Gender_survival)),height=Gender_survival['Survived_Count'],color = sns.color_palette("Paired", n_colors=2))
plt.xticks(range(len(Gender_survival)), xticks_labels, rotation=45, ha='right')
plt.xlabel('Sex')
plt.ylabel('Count')
plt.title('Survival Counts by Sex')

"""Insights :

1) Female survivors are more than male survivors

2) Male strength aboarded was more than female

3) Male Count not survived is more than female

Age
"""

bins = [0, 10, 20, 30, 40, 50, 60, 70, 80]  # Adjust the bin edges as needed
labels = ['0-10', '10-20', '20-30', '30-40', '40-50', '50-60','60-70','70-80']
dataset['age_group'] = pd.cut(dataset['Age'], bins=bins, labels=labels, right=False)
age_counts=dataset.groupby(['age_group','Survived']).size().unstack(fill_value=0)
age_counts.plot(kind='bar',stacked=False,rot=0)
plt.xlabel('Age Group')
plt.ylabel('Count')
plt.title('Survival Count by Age Group')

# Add legend
plt.legend(title='Survived', labels=['Not Survived', 'Survived'])

# Show the plot
plt.show()

"""Insights :

1) Age group 20-30 has the highest survivors and non-survivors count

2) Whole age group of 70-80 did not survive

3) Survivors of Children of age group 0-10 is the only age group that has survivors more than non-survivors

4) Age group 50-60 has the least difference between survivors ans non-survivors

Pclass

What are the different passenger classes available ?
"""

dataset['Pclass'].unique()

"""Insights : There are three different passenger classes and they are 1 , 2 and 3"""

pclass_survivors=dataset.groupby(['Pclass','Survived']).size().unstack(fill_value=0)

print(pclass_survivors)

sns.set(style="whitegrid")
pclass_survivors.plot(kind='bar',stacked=False,rot=0,color = sns.color_palette("husl"))
plt.ylabel('Count')
plt.title('Survival Count by Pclass')
plt.legend(title='Survived', labels=['Not Survived', 'Survived'])
plt.show()

"""Insights :

1) Most of the passengers not survived are from Pclass 3

2) Pclass 2 has the least difference between survivors and non-survivors

3) Pclass 1 is the only class to have survivors count higher than non-survivors count

Cabin

What are the Different Cabins available ?
"""

len(dataset['Cabin'].unique())

"""Insights : Since there are 148 differenct cabins are present including 'unknown' we will plot the survivors against present or not in cabin, this can be done by creating a new column in dataset"""

dataset['categorical_cabin'] = np.where(dataset['Cabin'] == 'Unknown', 'No', 'Yes')

print(dataset['categorical_cabin'])

"""Plotting against survival"""

Cabin_survival=dataset.groupby(['categorical_cabin','Survived']).size().unstack(fill_value=0)

Cabin_survival.plot(kind='bar',rot=0,stacked=True)
plt.ylabel('Count')
plt.xlabel('Cabin')
plt.title('Cabin Survival')
plt.legend(title='Survival',labels=['Non-Survived','Survived'])
sns.despine()
plt.show()

"""Insights : Survival count is more than the non-survival count for those choosed cabin"""